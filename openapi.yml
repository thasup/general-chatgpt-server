openapi: 3.0.3
info:
  title: General ChatGPT Server
  version: 1.0.0
servers:
  - url: http://localhost:9999/v1
    description: Local dev server
  - url: https://api.thanachon.me/v1
    description: Production server
paths:
  /colors/{input}:
    get:
      tags:
        - Colors
      summary: Get color palette by input
      description: Returns a color palette based on the input description.
      parameters:
        - name: input
          in: path
          required: true
          schema:
            type: string
          description: Description or theme for the color palette
          example: Neon Pastel
      responses:
        '200':
          description: Successful response with color palette
          content:
            application/json:
              schema:
                type: object
                properties:
                  colors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          description: Hex color code
                          example: '#FF6F61'
                        name:
                          type: string
                          description: Name of the color
                          example: Coral
        '400':
          description: Invalid input provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
  /colors/chat:
    post:
      tags:
        - Colors
      summary: Generate color palette via chat
      description: >-
        Returns a color palette based on a text description provided in the
        request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: string
                  description: Description for the color palette
                  example: warm sunset colors
                format:
                  type: string
                  enum:
                    - hex
                    - rgb
                    - hsl
                  default: hex
                  description: Desired format for the color output
      responses:
        '200':
          description: Successful response with generated color palette
          content:
            application/json:
              schema:
                type: object
                properties:
                  colors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          description: Hex color code
                          example: '#FF6F61'
                        name:
                          type: string
                          description: Name of the color
                          example: Coral
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
  /general/:
    get:
      tags:
        - General
      produces:
        - application/json
      responses:
        '200':
          description: Returns something
  /general/fix-grammar:
    post:
      tags:
        - General
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextInput'
      responses:
        '200':
          description: Fixes grammar in the provided text
  /general/summarize:
    post:
      tags:
        - General
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextInput'
      responses:
        '200':
          description: Summarizes the provided text
  /general/rewrite:
    post:
      tags:
        - General
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextInput'
      responses:
        '200':
          description: Rewrites the provided text
  /general/explain:
    post:
      tags:
        - General
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextInput'
      responses:
        '200':
          description: Explains the provided text
  /general/translate:
    post:
      tags:
        - General
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextInput'
      responses:
        '200':
          description: Translates the provided text
  /general/brainstorm:
    post:
      tags:
        - General
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextInput'
      responses:
        '200':
          description: Brainstorms ideas for the provided topic
  /general/outline:
    post:
      tags:
        - General
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextInput'
      responses:
        '200':
          description: Outlines the provided topic
  /general/write-blog:
    post:
      tags:
        - General
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextInput'
      responses:
        '200':
          description: Writes a blog post on the provided topic
  /general/shorter:
    post:
      tags:
        - General
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextInput'
      responses:
        '200':
          description: Shortens the provided text
  /general/longer:
    post:
      tags:
        - General
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextInput'
      responses:
        '200':
          description: Lengthens the provided text
  /manga/:
    get:
      tags:
        - Manga
      summary: Get manga API information
      description: Returns a greeting message from the manga comparator API.
      responses:
        '200':
          description: Successful response with a greeting message
          content:
            application/json:
              schema:
                type: string
                example: Hello! This is manga comparator API :D
    post:
      tags:
        - Manga
      summary: Compare two manga characters
      description: >-
        Compares two manga characters and returns the stronger character along
        with a score and reasoning.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                char1:
                  type: string
                  description: The first character to compare
                  example: Kaido
                char2:
                  type: string
                  description: The second character to compare
                  example: Nagato
                manga1:
                  type: string
                  description: The manga of the first character
                  example: One Piece
                manga2:
                  type: string
                  description: The manga of the second character
                  example: Naruto
      responses:
        '200':
          description: Successful response with comparison results
          content:
            application/json:
              schema:
                type: object
                properties:
                  winner:
                    type: string
                    description: Name of the winning character
                    example: Kaido from One Piece
                  reason:
                    type: string
                    description: Reason why the winner is stronger
                    example: Kaido is the strongest creature in the world of One Piece.
                  scores:
                    type: object
                    properties:
                      char1Score:
                        type: integer
                        description: Score of the first character
                        example: 100
                      char2Score:
                        type: integer
                        description: Score of the second character
                        example: 80
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
  /stack-connect/feelinks:
    post:
      tags:
        - Stack Connect
      summary: Generate a Feelinks scenario
      description: >-
        Generates a scenario for the Feelinks game based on the provided
        category.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  description: The category of the scenario.
                  example: Family
                  enum:
                    - Family
                    - Friend
                    - School
                    - Social
                    - Work
                    - Entertainment
                hasAudio:
                  type: boolean
                  description: (Optional) Whether to include audio in the response.
                  example: false
      responses:
        '200':
          description: Successful response with a generated Feelinks scenario.
          content:
            application/json:
              schema:
                type: object
                properties:
                  scenario:
                    type: string
                    description: The generated scenario text.
                    example: >-
                      Your parents surprise you with a gift, but it's something
                      you don't like. 🎁
                  audio:
                    type: string
                    description: (Optional) Audio URL for the scenario text.
                    example: ''
        '400':
          description: Invalid request, missing category input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: Missing a category input
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: Internal server error
  /stack-connect/sounds-fishy:
    post:
      tags:
        - Stack Connect
      summary: Generate a Sounds Fishy scenario
      description: >-
        Generates a trivia question for the Sounds Fishy game based on the
        provided category and language.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  description: The category of the trivia question.
                  example: History
                lang:
                  type: string
                  description: The language for the trivia question.
                  example: en-US
                hasAudio:
                  type: boolean
                  description: (Optional) Whether to include audio in the response.
                  example: false
      responses:
        '200':
          description: Successful response with a generated Sounds Fishy scenario.
          content:
            application/json:
              schema:
                type: object
                properties:
                  scenario:
                    type: object
                    properties:
                      question:
                        type: string
                        description: The trivia question.
                        example: >-
                          Which animal was officially enlisted as a soldier in
                          World War II?
                      answer:
                        type: string
                        description: The correct answer to the trivia question.
                        example: A bear named Wojtek
                      reference:
                        type: string
                        description: A reference or explanation for the correct answer.
                        example: >-
                          Wojtek, a Syrian brown bear, was enlisted in the
                          Polish Army in 1942 and helped carry artillery shells
                          during the Battle of Monte Cassino in 1944.
        '400':
          description: Invalid request, missing category input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: Missing a category input
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: Internal server error
  /stack-connect/ito:
    post:
      tags:
        - Stack Connect
      summary: Generate an Ito question
      description: >-
        Generates a question for the Ito game based on the provided category and
        language.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  description: The category of the Ito question.
                  example: Food
                lang:
                  type: string
                  description: The language for the Ito question.
                  example: en-US
                hasAudio:
                  type: boolean
                  description: (Optional) Whether to include audio in the response.
                  example: false
      responses:
        '200':
          description: Successful response with a generated Ito question.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      question:
                        type: string
                        description: The Ito question.
                        example: Most Addictive Snacks!
                      least:
                        type: string
                        description: The least extreme choice for the Ito question.
                        example: Easy to Stop Eating
                      most:
                        type: string
                        description: The most extreme choice for the Ito question.
                        example: Can't Stop Eating
                  audio:
                    type: string
                    description: (Optional) Audio URL for the question text.
                    example: ''
        '400':
          description: Invalid request, missing category input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: Missing a category input
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                    example: Internal server error
components:
  schemas:
    TextInput:
      type: object
      properties:
        input:
          type: string
          description: The text to be processed
          example: This is an example text.
        lang:
          type: string
          description: The language to be processed
          example: en-US
tags: []
